@using EventEase.Models
@using EventEase.Services
@inject SessionService SessionService

<div class="card event-card mb-4 @(IsSelected ? "border-primary" : "")" @onclick="OnCardClick">
    <div class="position-relative">
        @if (!string.IsNullOrEmpty(Event.ImageUrl))
        {
            <img src="@Event.ImageUrl" class="card-img-top event-image" alt="@Event.Title" />
        }
        else
        {
            <div class="card-img-top event-image-placeholder d-flex align-items-center justify-content-center">
                <i class="fas fa-calendar-alt fa-3x text-muted"></i>
            </div>
        }
        
        <div class="position-absolute top-0 end-0 m-2">
            <span class="badge @(Event.IsUpcoming ? "bg-success" : "bg-secondary")">
                @Event.StatusText
            </span>
        </div>

        @if (Event.IsFull)
        {
            <div class="position-absolute top-0 start-0 m-2">
                <span class="badge bg-danger">FULL</span>
            </div>
        }
    </div>

    <div class="card-body">
        @if (IsEditMode)
        {
            <div class="mb-3">
                <input @bind="Event.Title" @bind:event="oninput" class="form-control" placeholder="Event Title" />
            </div>
            <div class="mb-3">
                <textarea @bind="Event.Description" @bind:event="oninput" class="form-control" rows="3" placeholder="Event Description"></textarea>
            </div>
            <div class="row mb-3">
                <div class="col-md-6">
                    <input @bind="Event.EventDate" @bind:event="oninput" type="datetime-local" class="form-control" />
                </div>
                <div class="col-md-6">
                    <input @bind="Event.Location" @bind:event="oninput" class="form-control" placeholder="Location" />
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-4">
                    <input @bind="Event.MaxCapacity" @bind:event="oninput" type="number" class="form-control" placeholder="Capacity" min="1" />
                </div>
                <div class="col-md-4">
                    <input @bind="Event.Price" @bind:event="oninput" type="number" step="0.01" class="form-control" placeholder="Price" min="0" />
                </div>
                <div class="col-md-4">
                    <input @bind="Event.ImageUrl" @bind:event="oninput" class="form-control" placeholder="Image URL" />
                </div>
            </div>
            <div class="d-flex gap-2">
                <button @onclick="SaveChanges" @onclick:stopPropagation="true" class="btn btn-success btn-sm">
                    <i class="fas fa-save"></i> Save
                </button>
                <button @onclick="CancelEdit" @onclick:stopPropagation="true" class="btn btn-secondary btn-sm">
                    <i class="fas fa-times"></i> Cancel
                </button>
            </div>
        }
        else
        {
            <h5 class="card-title">@Event.Title</h5>
            <p class="card-text">@Event.Description</p>
            
            <div class="event-details">
                <div class="d-flex align-items-center mb-2">
                    <i class="fas fa-calendar text-primary me-2"></i>
                    <span>@Event.EventDate.ToString("dd MMM yyyy, HH:mm")</span>
                </div>
                <div class="d-flex align-items-center mb-2">
                    <i class="fas fa-map-marker-alt text-danger me-2"></i>
                    <span>@Event.Location</span>
                </div>
                <div class="d-flex align-items-center mb-2">
                    <i class="fas fa-users text-info me-2"></i>
                    <span>@Event.RegisteredCount/@Event.MaxCapacity participants</span>
                </div>
                @if (Event.Price > 0)
                {
                    <div class="d-flex align-items-center mb-2">
                        <i class="fas fa-tag text-success me-2"></i>
                        <span class="fw-bold">@Event.Price.ToString("C")</span>
                    </div>
                }
                else
                {
                    <div class="d-flex align-items-center mb-2">
                        <i class="fas fa-gift text-success me-2"></i>
                        <span class="fw-bold text-success">FREE</span>
                    </div>
                }
            </div>

            @if (ShowActions)
            {
                <div class="mt-3 d-flex gap-2 flex-wrap">
                    <button @onclick="() => OnRegisterClicked.InvokeAsync(Event)" @onclick:stopPropagation="true" 
                            class="btn btn-primary btn-sm" disabled="@Event.IsFull">
                        <i class="fas fa-user-plus"></i> 
                        @(Event.IsFull ? "Full" : "Register")
                    </button>
                    
                    @if (ShowEditButton)
                    {
                        <button @onclick="ToggleEditMode" @onclick:stopPropagation="true" class="btn btn-outline-secondary btn-sm">
                            <i class="fas fa-edit"></i> Edit
                        </button>
                    }
                    
                    @if (ShowDeleteButton)
                    {
                        <button @onclick="() => OnDeleteClicked.InvokeAsync(Event)" @onclick:stopPropagation="true" 
                                class="btn btn-outline-danger btn-sm">
                            <i class="fas fa-trash"></i> Delete
                        </button>
                    }
                    
                    <button @onclick="() => OnViewDetails.InvokeAsync(Event)" @onclick:stopPropagation="true" 
                            class="btn btn-outline-info btn-sm">
                        <i class="fas fa-eye"></i> Details
                    </button>
                </div>
            }

            <div class="progress mt-2" style="height: 6px;">
                <div class="progress-bar" role="progressbar" 
                     style="width: @(Event.MaxCapacity > 0 ? (Event.RegisteredCount * 100.0 / Event.MaxCapacity) : 0)%"
                     aria-valuenow="@Event.RegisteredCount" aria-valuemin="0" aria-valuemax="@Event.MaxCapacity">
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public Event Event { get; set; } = new();
    [Parameter] public bool ShowActions { get; set; } = true;
    [Parameter] public bool ShowEditButton { get; set; } = false;
    [Parameter] public bool ShowDeleteButton { get; set; } = false;
    [Parameter] public bool IsSelected { get; set; } = false;
    [Parameter] public EventCallback<Event> OnCardClicked { get; set; }
    [Parameter] public EventCallback<Event> OnRegisterClicked { get; set; }
    [Parameter] public EventCallback<Event> OnDeleteClicked { get; set; }
    [Parameter] public EventCallback<Event> OnViewDetails { get; set; }
    [Parameter] public EventCallback<Event> OnEventUpdated { get; set; }

    private bool IsEditMode = false;
    private Event OriginalEvent = new();

    private async Task OnCardClick()
    {
        SessionService.AddRecentActivity($"Viewed event: {Event.Title}");
        await OnCardClicked.InvokeAsync(Event);
    }

    private void ToggleEditMode()
    {
        if (!IsEditMode)
        {
            // Store original values for cancellation
            OriginalEvent = new Event
            {
                Id = Event.Id,
                Title = Event.Title,
                Description = Event.Description,
                EventDate = Event.EventDate,
                Location = Event.Location,
                MaxCapacity = Event.MaxCapacity,
                Price = Event.Price,
                ImageUrl = Event.ImageUrl,
                IsActive = Event.IsActive
            };
        }
        
        IsEditMode = !IsEditMode;
        SessionService.AddRecentActivity($"Started editing: {Event.Title}");
    }

    private async Task SaveChanges()
    {
        IsEditMode = false;
        SessionService.AddRecentActivity($"Saved changes to: {Event.Title}");
        await OnEventUpdated.InvokeAsync(Event);
    }

    private void CancelEdit()
    {
        // Restore original values
        Event.Title = OriginalEvent.Title;
        Event.Description = OriginalEvent.Description;
        Event.EventDate = OriginalEvent.EventDate;
        Event.Location = OriginalEvent.Location;
        Event.MaxCapacity = OriginalEvent.MaxCapacity;
        Event.Price = OriginalEvent.Price;
        Event.ImageUrl = OriginalEvent.ImageUrl;
        Event.IsActive = OriginalEvent.IsActive;
        
        IsEditMode = false;
        SessionService.AddRecentActivity($"Cancelled editing: {Event.Title}");
    }
}

<style>
    .event-card {
        transition: all 0.3s ease;
        cursor: pointer;
        height: 100%;
    }

    .event-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .event-image {
        height: 200px;
        object-fit: cover;
        width: 100%;
    }

    .event-image-placeholder {
        height: 200px;
        background-color: #f8f9fa;
        border-bottom: 1px solid #dee2e6;
    }

    .event-details {
        font-size: 0.9em;
    }

    .card.border-primary {
        border-width: 2px !important;
    }

    .progress-bar {
        transition: width 0.3s ease;
    }
</style>