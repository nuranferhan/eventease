@using EventEase.Models
@using EventEase.Services
@inject RegistrationService RegistrationService
@inject SessionService SessionService
@inject IJSRuntime JSRuntime

<div class="attendance-tracker">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h3>
            <i class="fas fa-clipboard-check me-2"></i>
            Attendance Tracker
        </h3>
        <div class="attendance-stats">
            <span class="badge bg-success fs-6 me-2">
                <i class="fas fa-users me-1"></i>
                Present: @AttendanceRecords.Count(a => a.IsPresent && !a.CheckOutTime.HasValue)
            </span>
            <span class="badge bg-info fs-6">
                <i class="fas fa-clock me-1"></i>
                Total Check-ins: @AttendanceRecords.Count
            </span>
        </div>
    </div>

    @if (Event != null)
    {
        <div class="event-info-bar p-3 bg-light rounded mb-4">
            <div class="row">
                <div class="col-md-8">
                    <h5 class="mb-1">@Event.Title</h5>
                    <p class="mb-0 text-muted">
                        <i class="fas fa-calendar me-1"></i> @Event.EventDate.ToString("dd MMM yyyy, HH:mm")
                        <span class="ms-3">
                            <i class="fas fa-map-marker-alt me-1"></i> @Event.Location
                        </span>
                    </p>
                </div>
                <div class="col-md-4 text-end">
                    <button @onclick="RefreshData" class="btn btn-outline-primary btn-sm">
                        <i class="fas fa-sync-alt me-1"></i>
                        Refresh
                    </button>
                </div>
            </div>
        </div>
    }

    @if (IsLoading)
    {
        <div class="text-center p-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading attendance data...</p>
        </div>
    }
    else
    {
        <!-- Quick Check-in Section -->
        <div class="card mb-4">
            <div class="card-header">
                <h5 class="mb-0">
                    <i class="fas fa-user-check me-2"></i>
                    Quick Check-in
                </h5>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="fas fa-search"></i>
                            </span>
                            <input @bind="SearchTerm" @bind:event="oninput" @onkeypress="HandleKeyPress" 
                                   class="form-control" placeholder="Search by name, email, or confirmation code..." />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <button @onclick="SearchRegistrations" class="btn btn-primary w-100">
                            <i class="fas fa-search me-1"></i>
                            Search
                        </button>
                    </div>
                </div>

                @if (SearchResults.Any())
                {
                    <div class="search-results mt-3">
                        <h6>Search Results:</h6>
                        @foreach (var registration in SearchResults)
                        {
                            <div class="registration-item p-2 border rounded mb-2">
                                <div class="d-flex justify-content-between align-items-center">
                                    <div>
                                        <strong>@registration.FullName</strong>
                                        <br>
                                        <small class="text-muted">@registration.Email</small>
                                        <span class="badge bg-secondary ms-2">@registration.ConfirmationCode</span>
                                    </div>
                                    <div>
                                        @{
                                            var existingAttendance = AttendanceRecords.FirstOrDefault(a => a.RegistrationId == registration.Id && !a.CheckOutTime.HasValue);
                                        }
                                        @if (existingAttendance != null)
                                        {
                                            <span class="badge bg-success me-2">Present</span>
                                            <button @onclick="() => CheckOut(existingAttendance.Id)" class="btn btn-warning btn-sm">
                                                <i class="fas fa-sign-out-alt me-1"></i>
                                                Check Out
                                            </button>
                                        }
                                        else
                                        {
                                            <button @onclick="() => CheckIn(registration)" class="btn btn-success btn-sm">
                                                <i class="fas fa-sign-in-alt me-1"></i>
                                                Check In
                                            </button>
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else if (!string.IsNullOrEmpty(SearchTerm) && !IsSearching)
                {
                    <div class="alert alert-info mt-3">
                        <i class="fas fa-info-circle me-2"></i>
                        No registrations found matching your search.
                    </div>
                }
            </div>
        </div>

        <!-- Current Attendance -->
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h5 class="mb-0">
                    <i class="fas fa-users me-2"></i>
                    Current Attendance (@AttendanceRecords.Count(a => a.IsPresent && !a.CheckOutTime.HasValue))
                </h5>
                <div>
                    <button @onclick="ExportAttendance" class="btn btn-outline-success btn-sm">
                        <i class="fas fa-download me-1"></i>
                        Export
                    </button>
                </div>
            </div>
            <div class="card-body">
                @if (AttendanceRecords.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Check-in Time</th>
                                    <th>Duration</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var record in AttendanceRecords.OrderByDescending(a => a.CheckInTime))
                                {
                                    <tr class="@(record.CheckOutTime.HasValue ? "table-secondary" : "")">
                                        <td>
                                            @if (record.Registration != null)
                                            {
                                                <strong>@record.Registration.FullName</strong>
                                            }
                                            else
                                            {
                                                <em>Unknown</em>
                                            }
                                        </td>
                                        <td>
                                            @if (record.Registration != null)
                                            {
                                                @record.Registration.Email
                                            }
                                        </td>
                                        <td>@record.CheckInTime.ToString("HH:mm:ss")</td>
                                        <td>@record.DurationText</td>
                                        <td>
                                            <span class="badge @(record.CheckOutTime.HasValue ? "bg-secondary" : "bg-success")">
                                                @record.StatusText
                                            </span>
                                        </td>
                                        <td>
                                            @if (!record.CheckOutTime.HasValue)
                                            {
                                                <button @onclick="() => CheckOut(record.Id)" class="btn btn-warning btn-sm">
                                                    <i class="fas fa-sign-out-alt me-1"></i>
                                                    Check Out
                                                </button>
                                            }
                                            else
                                            {
                                                <small class="text-muted">
                                                    Out: @record.CheckOutTime?.ToString("HH:mm:ss")
                                                </small>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="text-center p-4">
                        <i class="fas fa-clipboard-list fa-3x text-muted mb-3"></i>
                        <h5 class="text-muted">No attendance records yet</h5>
                        <p class="text-muted">Start checking in attendees to see them here.</p>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public Event? Event { get; set; }

    private List<AttendanceRecord> AttendanceRecords = new();
    private List<Registration> SearchResults = new();
    private string SearchTerm = string.Empty;
    private bool IsLoading = false;
    private bool IsSearching = false;

    protected override async Task OnParametersSetAsync()
    {
        if (Event != null)
        {
            await LoadAttendanceData();
        }
    }

    private async Task LoadAttendanceData()
    {
        IsLoading = true;
        try
        {
            if (Event != null)
            {
                AttendanceRecords = await RegistrationService.GetAttendanceByEventIdAsync(Event.Id);
                
                // Load registration details for each attendance record
                foreach (var record in AttendanceRecords)
                {
                    if (record.Registration == null)
                    {
                        record.Registration = await RegistrationService.GetRegistrationByIdAsync(record.RegistrationId);
                    }
                }
            }
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task SearchRegistrations()
    {
        if (string.IsNullOrEmpty(SearchTerm.Trim()) || Event == null)
        {
            SearchResults = new();
            return;
        }

        IsSearching = true;
        try
        {
            // Get all registrations for this event
            var eventRegistrations = await RegistrationService.GetRegistrationsByEventIdAsync(Event.Id);
            
            // Filter by search term
            SearchResults = eventRegistrations
                .Where(r => r.IsConfirmed && (
                    r.FirstName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    r.LastName.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    r.Email.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase) ||
                    r.ConfirmationCode.Contains(SearchTerm, StringComparison.OrdinalIgnoreCase)
                ))
                .Take(10) // Limit results
                .ToList();

            SessionService.AddSearchTerm(SearchTerm);
        }
        finally
        {
            IsSearching = false;
        }
    }

    private async Task CheckIn(Registration registration)
    {
        if (Event == null) return;

        try
        {
            var attendance = await RegistrationService.CheckInAsync(Event.Id, registration.Id);
            attendance.Registration = registration;
            
            AttendanceRecords.Add(attendance);
            
            // Remove from search results
            SearchResults.Remove(registration);
            
            SessionService.AddRecentActivity($"Checked in: {registration.FullName}");
            
            StateHasChanged();
        }
        catch (Exception ex)
        {
            // Handle error - could show a toast notification
            Console.WriteLine($"Check-in error: {ex.Message}");
        }
    }

    private async Task CheckOut(int attendanceId)
    {
        try
        {
            var success = await RegistrationService.CheckOutAsync(attendanceId);
            if (success)
            {
                var record = AttendanceRecords.FirstOrDefault(a => a.Id == attendanceId);
                if (record != null)
                {
                    record.CheckOutTime = DateTime.Now;
                    SessionService.AddRecentActivity($"Checked out: {record.Registration?.FullName ?? "Unknown"}");
                }
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Check-out error: {ex.Message}");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchRegistrations();
        }
    }

    private async Task RefreshData()
    {
        await LoadAttendanceData();
        SessionService.AddRecentActivity("Refreshed attendance data");
    }

    private async Task ExportAttendance()
    {
        try
        {
            var csvContent = GenerateCSVContent();
            var fileName = $"attendance_{Event?.Title?.Replace(" ", "_")}_{DateTime.Now:yyyyMMdd_HHmmss}.csv";
            
            await JSRuntime.InvokeVoidAsync("downloadFile", fileName, "text/csv", csvContent);
            SessionService.AddRecentActivity("Exported attendance data");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
        }
    }

    private string GenerateCSVContent()
    {
        var csv = new System.Text.StringBuilder();
        csv.AppendLine("Name,Email,Check-in Time,Check-out Time,Duration,Status");

        foreach (var record in AttendanceRecords.OrderBy(a => a.CheckInTime))
        {
            var name = record.Registration?.FullName ?? "Unknown";
            var email = record.Registration?.Email ?? "";
            var checkIn = record.CheckInTime.ToString("yyyy-MM-dd HH:mm:ss");
            var checkOut = record.CheckOutTime?.ToString("yyyy-MM-dd HH:mm:ss") ?? "";
            var duration = record.Duration?.ToString(@"hh\:mm") ?? "";
            var status = record.StatusText;

            csv.AppendLine($"\"{name}\",\"{email}\",\"{checkIn}\",\"{checkOut}\",\"{duration}\",\"{status}\"");
        }

        return csv.ToString();
    }
}

<style>
    .attendance-tracker {
        animation: fadeIn 0.5s ease-in-out;
    }

    .attendance-stats .badge {
        animation: pulse 2s infinite;
    }

    .event-info-bar {
        border-left: 4px solid var(--bs-primary);
    }

    .registration-item {
        transition: all 0.2s ease;
    }

    .registration-item:hover {
        background-color: var(--bs-light);
        transform: translateX(5px);
    }

    .search-results {
        max-height: 300px;
        overflow-y: auto;
    }

    .table-responsive {
        max-height: 500px;
        overflow-y: auto;
    }

    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    @@keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
</style>

<script>
    window.downloadFile = (filename, contentType, content) => {
        const a = document.createElement('a');
        const file = new Blob([content], { type: contentType });
        
        a.href = URL.createObjectURL(file);
        a.download = filename;
        a.click();
        
        URL.revokeObjectURL(a.href);
    };
</script>