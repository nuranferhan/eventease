@using EventEase.Services
@inject SessionService SessionService
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase
@implements IDisposable

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="d-flex justify-content-between align-items-center w-100">
                <div class="search-container">
                    <div class="input-group search-input-group">
                        <span class="input-group-text">
                            <i class="fas fa-search"></i>
                        </span>
                        <input @bind="QuickSearchTerm" @onkeypress="HandleQuickSearch" 
                               class="form-control" placeholder="Search events..." />
                        <button class="btn btn-outline-primary" type="button" @onclick="PerformSearch">
                            Search
                        </button>
                    </div>
                </div>
                
                <div class="user-section">
                    @if (SessionService.IsUserLoggedIn())
                    {
                        <div class="user-info">
                            <div class="user-avatar">
                                <i class="fas fa-user-circle"></i>
                            </div>
                            <div class="user-details">
                                <span class="user-name">@SessionService.GetCurrentUserName()</span>
                                <small class="user-status text-muted">Online</small>
                            </div>
                            <div class="dropdown">
                                <button class="btn btn-link dropdown-toggle" type="button" data-bs-toggle="dropdown">
                                    <i class="fas fa-chevron-down"></i>
                                </button>
                                <ul class="dropdown-menu dropdown-menu-end">
                                    <li><a class="dropdown-item" href="/profile"><i class="fas fa-user me-2"></i>Profile</a></li>
                                    <li><a class="dropdown-item" href="/settings"><i class="fas fa-cog me-2"></i>Settings</a></li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li><button class="dropdown-item" @onclick="Logout"><i class="fas fa-sign-out-alt me-2"></i>Sign Out</button></li>
                                </ul>
                            </div>
                        </div>
                    }
                    else
                    {
                        <button @onclick="Login" class="btn btn-primary">
                            <i class="fas fa-sign-in-alt me-1"></i>
                            Sign In
                        </button>
                    }
                </div>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string QuickSearchTerm = string.Empty;

    protected override void OnInitialized()
    {
        SessionService.OnStateChanged += StateHasChanged;
    }

    private void HandleQuickSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(QuickSearchTerm))
        {
            PerformSearch();
        }
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrEmpty(QuickSearchTerm))
        {
            SessionService.AddSearchTerm(QuickSearchTerm);
            NavigationManager.NavigateTo($"/events?search={Uri.EscapeDataString(QuickSearchTerm)}");
        }
    }

    private void Login()
    {
        SessionService.SetCurrentUser("user@example.com", "Demo User");
        SessionService.AddRecentActivity("Logged into the system");
    }

    private void Logout()
    {
        SessionService.AddRecentActivity("Logged out of the system");
        SessionService.LogoutUser();
    }

    public void Dispose()
    {
        SessionService.OnStateChanged -= StateHasChanged;
    }
}

<style>
    .page {
        position: relative;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    .sidebar {
        background: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
        box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
    }

    .top-row {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        border-bottom: none;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        height: 70px;
        display: flex;
        align-items: center;
        position: sticky;
        top: 0;
        z-index: 1000;
    }

    .search-container {
        flex: 1;
        max-width: 500px;
        margin-right: 2rem;
    }

    .search-input-group {
        border-radius: 25px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }

    .search-input-group .input-group-text {
        background-color: white;
        border: none;
        color: #6c757d;
    }

    .search-input-group .form-control {
        border: none;
        background-color: white;
        padding: 12px 15px;
    }

    .search-input-group .form-control:focus {
        box-shadow: none;
        background-color: white;
    }

    .search-input-group .btn {
        border: none;
        background-color: white;
        color: #667eea;
        font-weight: 600;
        padding: 12px 20px;
    }

    .search-input-group .btn:hover {
        background-color: #f8f9fa;
        color: #5a6fd8;
    }

    .user-section {
        display: flex;
        align-items: center;
    }

    .user-info {
        display: flex;
        align-items: center;
        background-color: rgba(255, 255, 255, 0.15);
        border-radius: 25px;
        padding: 8px 15px;
        backdrop-filter: blur(10px);
        border: 1px solid rgba(255, 255, 255, 0.2);
    }

    .user-avatar {
        margin-right: 12px;
    }

    .user-avatar i {
        font-size: 2rem;
        color: white;
    }

    .user-details {
        margin-right: 10px;
    }

    .user-name {
        color: white;
        font-weight: 600;
        display: block;
        line-height: 1.2;
    }

    .user-status {
        color: rgba(255, 255, 255, 0.8);
        font-size: 0.75rem;
        display: block;
    }

    .dropdown-toggle {
        color: white !important;
        border: none;
        padding: 5px;
    }

    .dropdown-toggle:hover {
        color: rgba(255, 255, 255, 0.8) !important;
    }

    .dropdown-menu {
        border: none;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.15);
        border-radius: 10px;
        padding: 10px;
        margin-top: 10px;
    }

    .dropdown-item {
        border-radius: 5px;
        padding: 10px 15px;
        transition: all 0.2s ease;
    }

    .dropdown-item:hover {
        background-color: #f8f9fa;
        transform: translateX(5px);
    }

    .content {
        flex: 1;
        background-color: #f8f9fa;
        padding-top: 2rem !important;
    }

    /* Mobile Responsive */
    @@media (max-width: 768px) {
        .top-row {
            height: 60px;
            padding: 0 1rem;
        }

        .search-container {
            flex: 1;
            margin-right: 1rem;
            max-width: none;
        }

        .user-info {
            padding: 6px 10px;
        }

        .user-details {
            display: none;
        }

        .user-avatar i {
            font-size: 1.5rem;
        }
    }

    @@media (max-width: 640.98px) {
        .search-container {
            display: none;
        }

        .top-row {
            justify-content: flex-end;
        }

        .page {
            flex-direction: column;
        }

        .sidebar {
            order: 2;
            height: auto;
        }

        main {
            order: 1;
        }
    }

    @@media (min-width: 641px) {
        .page {
            flex-direction: row;
        }

        .sidebar {
            width: 250px;
            height: 100vh;
            position: sticky;
            top: 0;
        }

        .content {
            padding-left: 2rem !important;
            padding-right: 2rem !important;
        }
    }
</style>