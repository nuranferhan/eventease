@using EventEase.Services
@inject SessionService SessionService
@inherits LayoutView

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="d-flex justify-content-between align-items-center w-100">
                <div class="search-bar d-none d-md-flex">
                    <div class="input-group">
                        <input @bind="QuickSearchTerm" @onkeypress="HandleQuickSearch" 
                               class="form-control form-control-sm" placeholder="Quick search..." />
                        <button class="btn btn-outline-secondary btn-sm" type="button">
                            <i class="fas fa-search"></i>
                        </button>
                    </div>
                </div>
                
                <div class="user-info">
                    @if (SessionService.IsUserLoggedIn())
                    {
                        <span class="text-muted me-3">Welcome, @SessionService.GetCurrentUserName()</span>
                        <button @onclick="Logout" class="btn btn-sm btn-outline-secondary">
                            <i class="fas fa-sign-out-alt me-1"></i>
                            Logout
                        </button>
                    }
                    else
                    {
                        <button @onclick="Login" class="btn btn-sm btn-primary">
                            <i class="fas fa-sign-in-alt me-1"></i>
                            Login
                        </button>
                    }
                </div>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private string QuickSearchTerm = string.Empty;

    protected override void OnInitialized()
    {
        SessionService.OnStateChanged += StateHasChanged;
    }

    private async Task HandleQuickSearch(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(QuickSearchTerm))
        {
            var navigationManager = (NavigationManager)ServiceProvider.GetService(typeof(NavigationManager))!;
            SessionService.AddSearchTerm(QuickSearchTerm);
            navigationManager.NavigateTo($"/events?search={Uri.EscapeDataString(QuickSearchTerm)}");
        }
    }

    private void Login()
    {
        // Simulate login - in real app, this would redirect to login page
        SessionService.SetCurrentUser("user@example.com", "Demo User");
        SessionService.AddRecentActivity("Logged in");
    }

    private void Logout()
    {
        SessionService.AddRecentActivity("Logged out");
        SessionService.LogoutUser();
    }

    public void Dispose()
    {
        SessionService.OnStateChanged -= StateHasChanged;
    }
}

<style>
    .page {
        position: relative;
        display: flex;
        flex-direction: column;
    }

    .sidebar {
        background-image: linear-gradient(180deg, rgb(5, 39, 103) 0%, #3a0647 70%);
    }

    .top-row {
        background-color: #f7f7f7;
        border-bottom: 1px solid #d6d5d5;
        justify-content: flex-end;
        height: 3.5rem;
        display: flex;
        align-items: center;
    }

    .search-bar {
        flex: 1;
        max-width: 400px;
    }

    .user-info {
        display: flex;
        align-items: center;
    }

    @media (max-width: 640.98px) {
        .top-row:not(.auth) {
            display: none;
        }

        .top-row.auth {
            justify-content: space-between;
        }

        .top-row a, .top-row .btn-link {
            margin-left: 0;
        }
    }

    @media (min-width: 641px) {
        .page {
            flex-direction: row;
        }

        .sidebar {
            width: 250px;
            height: 100vh;
            position: sticky;
            top: 0;
        }

        .top-row {
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .content {
            flex: 1;
        }

        .top-row.auth a:first-child {
            flex: 1;
        }

        .top-row, article {
            padding-left: 2rem !important;
            padding-right: 1.5rem !important;
        }
    }
</style>